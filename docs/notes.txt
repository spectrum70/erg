Sysam erg                                              doc ver: 001 - 04 Sep 2020


Some useful notes




1. Introduction

Complexity grows continuosly in the embedded build systems design-principles, 
often cargo-cult and overdesign brings to the typcal feeling that more features
and advanced technologies are always better. A fashon that companies then copy
by each other, but finally without a real need to use such complex systems,

This choice introduce a not so small learning-curve, and the new and complec
technology, for programmers that are not really experts in it, becomes a real
enemy, producing days and days of delays in matching the timeline targets.

This simple build system has been created by Sysam for internal usage, to build
small root file systems for ColdFire no-mmu SoC's, with the ambition to be
simple, unuseful user-level complexity to reach the final purpose is strictly
forbidden. The big ambition is also to expanded for several architectures, but 
staying simple.


2. Toolchains

Depending on architectures, specific toolchains must be used. The erg is not 
including a toolchain build process, since it would require much additioanl 
job unrelated to the rootfs building process. We are providing some suitable 
configurations for most famous toolchain builders and uclibc.

See configs/toolchains

Notes:

m68k no-mmu flat for ColdFire:
 - used ct-ng
 - to enable multilib is mandatory (otherwise exitcode 0x0000000b, SIGSEGV)
 - to enable multilib, speficic uClibc-ng config is needed, to build a 
   crosstools-ng toolchian use config files in crotttools-ng folder.
 * actually, enabling c++ produces errors

m68k mmu elf dor ColdFire:
 - a suitable toolchains has been produced by openadk


3. Known limitations

3.1. Of the erg system

The erg progresses over time, Limitations are many and listing them would cause
just a continuous document update problem.


3.2. no-mmu

On no-mmu cpu's fork cannot work, since linux immplements fork by copy-on-write
mechanisms that no-mmu SoC's does not support.
